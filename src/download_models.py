import os
import requests
from pathlib import Path
import logging
from tqdm import tqdm
import torch
from ultralytics import YOLO
from ultralytics.nn.tasks import DetectionModel

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Configuration de la s√©curit√© PyTorch
torch.serialization.add_safe_globals([DetectionModel])

# URLs des mod√®les
MODELS = {
    # YOLOv8
    'yolov8n.pt': 'https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8n.pt',
    'yolov8s.pt': 'https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8s.pt',
    'yolov8m.pt': 'https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8m.pt',
    'yolov8l.pt': 'https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8l.pt',
    'yolov8x.pt': 'https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8x.pt',
    
    # YOLOv3
    'yolov3-tiny.pt': 'https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov3-tiny.pt',
    'yolov3.pt': 'https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov3.pt',
    'yolov3-spp.pt': 'https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov3-spp.pt',
    
    # Mod√®les sp√©cialis√©s
    'yolov8n-face.pt': 'https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8n-face.pt',
    'yolov8n-pose.pt': 'https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8n-pose.pt',
    'yolov8n-seg.pt': 'https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8n-seg.pt'
}

def verify_model(model_path: Path) -> bool:
    """
    V√©rifie si le mod√®le peut √™tre charg√© correctement avec gestion de la s√©curit√© PyTorch 2.2.0
    """
    try:
        # Premi√®re tentative avec weights_only=True (par d√©faut)
        try:
            model = YOLO(str(model_path))
        except Exception as e1:
            logging.warning(f"Tentative de chargement alternatif pour {model_path}")
            # Deuxi√®me tentative avec weights_only=False
            model = torch.load(str(model_path), weights_only=False)
            model = YOLO(model)

        # V√©rification simple de l'existence du fichier
        if not model_path.exists():
            logging.error(f"Le fichier {model_path} n'existe pas")
            return False

        # V√©rification de la taille du fichier
        if model_path.stat().st_size < 1000:  # moins de 1KB
            logging.error(f"Le fichier {model_path} semble corrompu (trop petit)")
            return False

        logging.info(f"‚úÖ Mod√®le {model_path.name} v√©rifi√© avec succ√®s")
        return True

    except Exception as e:
        logging.error(f"Erreur lors de la v√©rification de {model_path}: {str(e)}")
        return False

def download_file(url: str, dest_path: Path, desc: str = None) -> bool:
    """
    T√©l√©charge un fichier avec barre de progression
    """
    try:
        response = requests.get(url, stream=True)
        response.raise_for_status()
        total = int(response.headers.get('content-length', 0))
        
        with open(dest_path, 'wb') as file, tqdm(
            desc=desc,
            total=total,
            unit='iB',
            unit_scale=True,
            unit_divisor=1024,
        ) as pbar:
            for data in response.iter_content(chunk_size=1024):
                size = file.write(data)
                pbar.update(size)
        
        # V√©rification du mod√®le apr√®s t√©l√©chargement
        if verify_model(dest_path):
            return True
        else:
            logging.error(f"Le mod√®le {dest_path} n'a pas pass√© la v√©rification")
            os.remove(dest_path)
            return False
            
    except Exception as e:
        logging.error(f"Erreur lors du t√©l√©chargement de {url}: {str(e)}")
        if dest_path.exists():
            os.remove(dest_path)
        return False

def main():
    """
    Fonction principale pour t√©l√©charger tous les mod√®les
    """
    # Cr√©ation des dossiers n√©cessaires
    models_dir = Path('src/models')
    models_dir.mkdir(parents=True, exist_ok=True)
    
    # T√©l√©chargement des mod√®les
    success_count = 0
    for model_name, url in MODELS.items():
        model_path = models_dir / model_name
        if not model_path.exists():
            logging.info(f"T√©l√©chargement de {model_name}...")
            if download_file(url, model_path, desc=f"T√©l√©chargement {model_name}"):
                success_count += 1
                logging.info(f"‚úÖ {model_name} t√©l√©charg√© et v√©rifi√© avec succ√®s")
            else:
                logging.error(f"‚ùå √âchec du t√©l√©chargement ou de la v√©rification de {model_name}")
        else:
            if verify_model(model_path):
                logging.info(f"‚úÖ {model_name} existe d√©j√† et est valide")
                success_count += 1
            else:
                logging.warning(f"‚ö†Ô∏è {model_name} existe mais n'est pas valide, ret√©l√©chargement...")
                os.remove(model_path)
                if download_file(url, model_path, desc=f"Ret√©l√©chargement {model_name}"):
                    success_count += 1
                    logging.info(f"‚úÖ {model_name} ret√©l√©charg√© et v√©rifi√© avec succ√®s")
    
    # Rapport final
    total_models = len(MODELS)
    logging.info(f"\nR√©sum√© du t√©l√©chargement:")
    logging.info(f"‚úÖ {success_count}/{total_models} mod√®les disponibles et v√©rifi√©s")
    if success_count < total_models:
        logging.warning(f"‚ö†Ô∏è {total_models - success_count} mod√®les n'ont pas pu √™tre t√©l√©charg√©s ou v√©rifi√©s")
    else:
        logging.info("üéâ Tous les mod√®les sont pr√™ts!")

if __name__ == "__main__":
    main() 